<?php

namespace Proxies\__CG__\bp\Bundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Tournament extends \bp\Bundle\Entity\Tournament implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function __toString()
    {
        $this->__load();
        return parent::__toString();
    }

    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setName($name)
    {
        $this->__load();
        return parent::setName($name);
    }

    public function getName()
    {
        $this->__load();
        return parent::getName();
    }

    public function setDescription($description)
    {
        $this->__load();
        return parent::setDescription($description);
    }

    public function getDescription()
    {
        $this->__load();
        return parent::getDescription();
    }

    public function setCreated($created)
    {
        $this->__load();
        return parent::setCreated($created);
    }

    public function getCreated()
    {
        $this->__load();
        return parent::getCreated();
    }

    public function setUpdated($updated)
    {
        $this->__load();
        return parent::setUpdated($updated);
    }

    public function getUpdated()
    {
        $this->__load();
        return parent::getUpdated();
    }

    public function getFavorited_by()
    {
        $this->__load();
        return parent::getFavorited_by();
    }

    public function setFavorited_by($favorited_by)
    {
        $this->__load();
        return parent::setFavorited_by($favorited_by);
    }

    public function getLeague()
    {
        $this->__load();
        return parent::getLeague();
    }

    public function setLeague($league)
    {
        $this->__load();
        return parent::setLeague($league);
    }

    public function addTeam(\bp\Bundle\Entity\Team $teams)
    {
        $this->__load();
        return parent::addTeam($teams);
    }

    public function removeTeam(\bp\Bundle\Entity\Team $teams)
    {
        $this->__load();
        return parent::removeTeam($teams);
    }

    public function getTeams()
    {
        $this->__load();
        return parent::getTeams();
    }

    public function addMatche(\bp\Bundle\Entity\Match $matches)
    {
        $this->__load();
        return parent::addMatche($matches);
    }

    public function removeMatche(\bp\Bundle\Entity\Match $matches)
    {
        $this->__load();
        return parent::removeMatche($matches);
    }

    public function getMatches()
    {
        $this->__load();
        return parent::getMatches();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'name', 'description', 'favorited_by', 'created', 'updated', 'league', 'teams', 'matches');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}