<?php

namespace Proxies\__CG__\bp\Bundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class PowerType extends \bp\Bundle\Entity\PowerType implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function __toString()
    {
        $this->__load();
        return parent::__toString();
    }

    public function setId($id)
    {
        $this->__load();
        return parent::setId($id);
    }

    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setManagement($management)
    {
        $this->__load();
        return parent::setManagement($management);
    }

    public function getManagement()
    {
        $this->__load();
        return parent::getManagement();
    }

    public function setSet_pieces($set_pieces)
    {
        $this->__load();
        return parent::setSet_pieces($set_pieces);
    }

    public function getSet_pieces()
    {
        $this->__load();
        return parent::getSet_pieces();
    }

    public function setBench($bench)
    {
        $this->__load();
        return parent::setBench($bench);
    }

    public function getBench()
    {
        $this->__load();
        return parent::getBench();
    }

    public function setAttack($attack)
    {
        $this->__load();
        return parent::setAttack($attack);
    }

    public function getAttack()
    {
        $this->__load();
        return parent::getAttack();
    }

    public function setMidfield($midfield)
    {
        $this->__load();
        return parent::setMidfield($midfield);
    }

    public function getMidfield()
    {
        $this->__load();
        return parent::getMidfield();
    }

    public function setDefence($defence)
    {
        $this->__load();
        return parent::setDefence($defence);
    }

    public function getDefence()
    {
        $this->__load();
        return parent::getDefence();
    }

    public function setGoulies($goulies)
    {
        $this->__load();
        return parent::setGoulies($goulies);
    }

    public function getGoulies()
    {
        $this->__load();
        return parent::getGoulies();
    }

    public function setTactics($tactics)
    {
        $this->__load();
        return parent::setTactics($tactics);
    }

    public function getTactics()
    {
        $this->__load();
        return parent::getTactics();
    }

    public function setHome_away($home_away)
    {
        $this->__load();
        return parent::setHome_away($home_away);
    }

    public function getHome_away()
    {
        $this->__load();
        return parent::getHome_away();
    }

    public function setName($name)
    {
        $this->__load();
        return parent::setName($name);
    }

    public function getName()
    {
        $this->__load();
        return parent::getName();
    }

    public function setDescription($description)
    {
        $this->__load();
        return parent::setDescription($description);
    }

    public function getDescription()
    {
        $this->__load();
        return parent::getDescription();
    }

    public function setCreated($created)
    {
        $this->__load();
        return parent::setCreated($created);
    }

    public function getCreated()
    {
        $this->__load();
        return parent::getCreated();
    }

    public function setUpdated($updated)
    {
        $this->__load();
        return parent::setUpdated($updated);
    }

    public function getUpdated()
    {
        $this->__load();
        return parent::getUpdated();
    }

    public function setSport(\bp\Bundle\Entity\Sport $sport = NULL)
    {
        $this->__load();
        return parent::setSport($sport);
    }

    public function getSport()
    {
        $this->__load();
        return parent::getSport();
    }

    public function addUserTeamPower(\bp\Bundle\Entity\UserTeamPower $userTeamPowers)
    {
        $this->__load();
        return parent::addUserTeamPower($userTeamPowers);
    }

    public function removeUserTeamPower(\bp\Bundle\Entity\UserTeamPower $userTeamPowers)
    {
        $this->__load();
        return parent::removeUserTeamPower($userTeamPowers);
    }

    public function getUserTeamPowers()
    {
        $this->__load();
        return parent::getUserTeamPowers();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'home_away', 'management', 'goulies', 'defence', 'tactics', 'midfield', 'attack', 'bench', 'set_pieces', 'name', 'description', 'created', 'updated', 'sport', 'user_team_powers');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}