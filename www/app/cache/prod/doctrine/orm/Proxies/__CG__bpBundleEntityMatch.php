<?php

namespace Proxies\__CG__\bp\Bundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Match extends \bp\Bundle\Entity\Match implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function __toString()
    {
        $this->__load();
        return parent::__toString();
    }

    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function getScore_away()
    {
        $this->__load();
        return parent::getScore_away();
    }

    public function setScore_away($score_away)
    {
        $this->__load();
        return parent::setScore_away($score_away);
    }

    public function getScore_home()
    {
        $this->__load();
        return parent::getScore_home();
    }

    public function setScore_home($score_home)
    {
        $this->__load();
        return parent::setScore_home($score_home);
    }

    public function getResult_type()
    {
        $this->__load();
        return parent::getResult_type();
    }

    public function setResult_type($result_type)
    {
        $this->__load();
        return parent::setResult_type($result_type);
    }

    public function setBegins_At($beginsAt)
    {
        $this->__load();
        return parent::setBegins_At($beginsAt);
    }

    public function getBegins_At()
    {
        $this->__load();
        return parent::getBegins_At();
    }

    public function setSlug($slug)
    {
        $this->__load();
        return parent::setSlug($slug);
    }

    public function getSlug()
    {
        $this->__load();
        return parent::getSlug();
    }

    public function setDescription($description)
    {
        $this->__load();
        return parent::setDescription($description);
    }

    public function getDescription()
    {
        $this->__load();
        return parent::getDescription();
    }

    public function setVenueIsNeutral($venueIsNeutral)
    {
        $this->__load();
        return parent::setVenueIsNeutral($venueIsNeutral);
    }

    public function getVenueIsNeutral()
    {
        $this->__load();
        return parent::getVenueIsNeutral();
    }

    public function setCreated($created)
    {
        $this->__load();
        return parent::setCreated($created);
    }

    public function getCreated()
    {
        $this->__load();
        return parent::getCreated();
    }

    public function setUpdated($updated)
    {
        $this->__load();
        return parent::setUpdated($updated);
    }

    public function getUpdated()
    {
        $this->__load();
        return parent::getUpdated();
    }

    public function setTournament(\bp\Bundle\Entity\Tournament $tournament = NULL)
    {
        $this->__load();
        return parent::setTournament($tournament);
    }

    public function getTournament()
    {
        $this->__load();
        return parent::getTournament();
    }

    public function setTeamHome(\bp\Bundle\Entity\Team $teamHome = NULL)
    {
        $this->__load();
        return parent::setTeamHome($teamHome);
    }

    public function getTeamHome()
    {
        $this->__load();
        return parent::getTeamHome();
    }

    public function setTeamAway(\bp\Bundle\Entity\Team $teamAway = NULL)
    {
        $this->__load();
        return parent::setTeamAway($teamAway);
    }

    public function getTeamAway()
    {
        $this->__load();
        return parent::getTeamAway();
    }

    public function setTournament_name($tournamentName)
    {
        $this->__load();
        return parent::setTournament_name($tournamentName);
    }

    public function getTournament_name()
    {
        $this->__load();
        return parent::getTournament_name();
    }

    public function setTeam_home_name($teamHomeName)
    {
        $this->__load();
        return parent::setTeam_home_name($teamHomeName);
    }

    public function getFavorited_by()
    {
        $this->__load();
        return parent::getFavorited_by();
    }

    public function setFavorited_by($favorited_by)
    {
        $this->__load();
        return parent::setFavorited_by($favorited_by);
    }

    public function getTeam_home_name()
    {
        $this->__load();
        return parent::getTeam_home_name();
    }

    public function setTeam_away_name($teamAwayName)
    {
        $this->__load();
        return parent::setTeam_away_name($teamAwayName);
    }

    public function getTeam_away_name()
    {
        $this->__load();
        return parent::getTeam_away_name();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'score_home', 'score_away', 'favorited_by', 'result_type', 'begins_at', 'slug', 'description', 'venue_is_neutral', 'tournament_name', 'team_home_name', 'team_away_name', 'created', 'updated', 'tournament', 'team_home', 'team_away');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}